		super(new JFrame("Chip Picker"),true);
		System.out.println("Creating chip picker");
		setLocation(400,400);
		
		JPanel messagePane = new JPanel();
		messagePane.add(new JLabel("Choose a Chip"));
		getContentPane().add(messagePane);
		
		JPanel buttonPane = new JPanel();
		JButton learnButton = new JButton();
		buttonPane.add(learnButton);
		
		
		
		/*******************Handlist************************************
		package termProject;

import java.util.Vector;
//@TODO: move to hand class
/**
 * Builds a vector of strings of card names for a LJist to use
 * @author James
 *
 */
public class HandList {
	private Vector<String> nameVec;
	private int handSize;
	private Card cCard;
	private String cardName;

	public HandList(Hand h) {
		handSize = h.getSize();
		nameVec = new Vector<String>();
		
		for(int i = 0; i < handSize; i++){
			cCard = h.get(i);
			if(cCard == null){
				cardName = "Empty";
			} else {
				cardName = cCard.getName();
			}
			nameVec.add(cardName);
		}	
	}

	/**
	 * Returns the vector of string which are the names of the cards
	 * @return vector containing names
	 */
	public Vector<String> getNames(){
		return nameVec;
	}
}
		
		******************end hand list****************************************
		
		
**********************aiplay in controller
/**
	 * AI player will either move to a random neighboring room or play card.
	 * The player can move up to 3 times and must end turn by playing card.
	 * @return String describing AI movement
	 */
	public Vector<String> aiPlay(){
		Vector<String> consoleMsg = new Vector<String>();
		String tempStr;
		int choice;
		int currentRNum;
		int numNeighbors;
		int neighborIndexChoice;
		int rNumChoice;
		
		whileLoop://labels the while loop as 'whileLoop'
		while(pList.getCurrent().getMoveCount() < 3){
			choice = random(2);//random number 0-1
			if(choice == 0){
				currentRNum = pList.getCurrent().getRNumLocation();//current room number
				numNeighbors = rList.getNeighborNames(currentRNum).length;//number of neighbors
				neighborIndexChoice = random(numNeighbors);//random index of neighbors[]
				rNumChoice = rList.getRoom(currentRNum).getNeighbor(neighborIndexChoice);//chosen room number
				pList.movePlayer(pList.getCurrent(), rList.getRoom(rNumChoice));//moves the player
				tempStr = "moving AI player "+pList.getCurrent().getPName() + " to " + rList.getRoom(rNumChoice).getRoomName();//store output message
				System.out.println(tempStr);//print to console
				consoleMsg.add(tempStr); //add to string vector
			}
			else{
				tempStr = "AI player "+pList.getCurrent().getPName() + " plays their card";
				System.out.println(tempStr);//print to console for tracking
				consoleMsg.add(tempStr);//stores console message
				//call playCard() method
				break whileLoop; // exit while loop after game card is played
			}
		}//end of whileLoop
		
	//TODO: Delete this once AI has been sorted after iteration #1
		if(pList.getCurrent().getMoveCount() == 3){//playCard() when out of moves
			tempStr = "AI player "+pList.getCurrent().getPName() + " plays their card";
			System.out.println(tempStr);//print to console for tracking
			consoleMsg.add(tempStr);//stores console message
			//call playCard() method
		}
		pList.setNextPlayer();//advance to next player
		
		return consoleMsg;
	}
	